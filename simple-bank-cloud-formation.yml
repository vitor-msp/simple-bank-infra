AWSTemplateFormatVersion: "2010-09-09"
Description: Simple Bank infrastructure (including vpc, ecs, alb, autoscaling, pipeline cicd, s3, rds)

Parameters:
  ApplicationName:
    Type: String
    Default: simple-bank
    Description: Application name
  GitHubConnectionArn:
    Type: String
    Description: GitHub connection ARN for CodePipeline
  TokenKey:
    Type: String
    NoEcho: true
    Description: Key to use in token generation
  AccessTokenExpiresInSeconds:
    Type: Number
    Default: 900
    Description: Seconds until access token expires
  RefreshTokenExpiresInSeconds:
    Type: Number
    Default: 604800
    Description: Seconds until refresh token expires
  DBPassword:
    Type: String
    NoEcho: true
    Description: Password to use to access the database with the 'simplebank' user
  CachePassword:
    Type: String
    NoEcho: true
    Description: Password to use to access the Redis cache with the 'default' user

Mappings:
  VPCMap:
    VPC:
      CIDR: "10.0.0.0/16"
    Public01:
      CIDR: "10.0.0.0/24"
    Public02:
      CIDR: "10.0.1.0/24"
    Private01:
      CIDR: "10.0.2.0/24"
    Private02:
      CIDR: "10.0.3.0/24"
  ContainersMap:
    Api:
      Port: "8080"
    Database:
      Port: "5432"
      Name: "simplebank"
      User: "simplebank"
    Cache:
      Port: "6379"

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["VPCMap", "VPC", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-vpc"
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["VPCMap", "Public01", "CIDR"]
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-pub-subnet-01"
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["VPCMap", "Public02", "CIDR"]
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-pub-subnet-02"
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["VPCMap", "Private01", "CIDR"]
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-priv-subnet-01"
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["VPCMap", "Private02", "CIDR"]
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-priv-subnet-02"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-igw"
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref "InternetGateway"
      VpcId: !Ref "VPC"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-pub-rtb"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable
  ElasticIP01:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-eip-01"
  NatGateway01:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP01.AllocationId
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-natg-01"
  ElasticIP02:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-eip-02"
  NatGateway02:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP02.AllocationId
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-natg-02"
  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-priv-rtb-01"
  PrivateRoute01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01
  PrivateRouteTable01Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01
  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-priv-rtb-02"
  PrivateRoute02:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02
  PrivateRouteTable02Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  # load balancing
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow web
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-alb-sg"
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - !Ref "PublicSubnet01"
        - !Ref "PublicSubnet02"
      SecurityGroups: [!Ref "PublicLoadBalancerSG"]
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-alb"
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ApplicationName}-tg"
      TargetType: ip
      Protocol: HTTP
      Port: !FindInMap ["ContainersMap", "Api", "Port"]
      VpcId: !Ref "VPC"
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-tg"
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref "PublicLoadBalancer"
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref "TargetGroup"

  # Database
  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref "VPC"
      GroupDescription: allow postgres access
      SecurityGroupIngress:
        - CidrIp: !FindInMap ["VPCMap", "VPC", "CIDR"]
          IpProtocol: tcp
          FromPort: !FindInMap ["ContainersMap", "Database", "Port"]
          ToPort: !FindInMap ["ContainersMap", "Database", "Port"]
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-rds-sg"
  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: subnet group for database
      SubnetIds:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
  RDSDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      StorageEncrypted: true
      Port: !FindInMap ["ContainersMap", "Database", "Port"]
      DBParameterGroupName: "default.postgres16"
      NetworkType: "IPV4"
      DedicatedLogVolume: false
      CopyTagsToSnapshot: true
      BackupRetentionPeriod: 0
      DeleteAutomatedBackups: true
      MultiAZ: false
      Engine: "postgres"
      EngineLifecycleSupport: "open-source-rds-extended-support-disabled"
      LicenseModel: "postgresql-license"
      EngineVersion: "16.3"
      StorageType: "gp2"
      DBInstanceClass: "db.t4g.micro"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      OptionGroupName: "default:postgres-16"
      EnablePerformanceInsights: false
      AutoMinorVersionUpgrade: true
      DBSubnetGroupName: !Ref "RDSDBSubnetGroup"
      DeletionProtection: false
      DBInstanceIdentifier: "simplebank"
      AllocatedStorage: "20"
      ManageMasterUserPassword: false
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      MasterUsername: !FindInMap ["ContainersMap", "Database", "User"]
      MasterUserPassword: !Ref DBPassword
      DBName: !FindInMap ["ContainersMap", "Database", "Name"]
      PubliclyAccessible: true
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-rds"

  # Secrets Manager
  SecretsManagerSecret:
    Type: "AWS::SecretsManager::Secret"
    DependsOn: RDSDBInstance
    Properties:
      Name: !Sub "${ApplicationName}-secret"
      SecretString: !Sub
        - |
          {
            "DB_CONNECTION_STRING": "Host=${DBHost};Port=${DBPort};Database=${DBName};Username=${DBUser};Password=${DBPassword}",
            "CACHE_CONNECTION_STRING": "redis:${CachePort},password=${CachePassword}",
            "CACHE_PASSWORD": "${CachePassword}",
            "TOKEN_KEY": "${TokenKey}"
          }
        - DBHost: !GetAtt RDSDBInstance.Endpoint.Address
          DBPort: !FindInMap
            - ContainersMap
            - Database
            - Port
          DBName: !FindInMap
            - ContainersMap
            - Database
            - Name
          DBUser: !FindInMap
            - ContainersMap
            - Database
            - User
          DBPassword: !Ref DBPassword
          CachePort: !FindInMap
            - ContainersMap
            - Cache
            - Port
          CachePassword: !Ref CachePassword

  # ECS
  Namespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Name: !Sub "${ApplicationName}-ns"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${ApplicationName}-log-group"
  ECSCluster:
    Type: AWS::ECS::Cluster
    DependsOn: Namespace
    Properties:
      ClusterName: !Sub "${ApplicationName}-cluster"
      ServiceConnectDefaults:
        Namespace: !Sub "${ApplicationName}-ns"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-cluster"
  # Api ECS Service
  TaskSecurityGroupApi:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the containers
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !FindInMap ["ContainersMap", "Api", "Port"]
          ToPort: !FindInMap ["ContainersMap", "Api", "Port"]
          SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-api-task-sg"
  TaskExecutionRoleApi:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TaskExecutionRoleApi
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TaskExecutionRolePolicyApi
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                Resource: "*"
  TaskDefinitionApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ApplicationName}-api-td"
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref "TaskExecutionRoleApi"
      ContainerDefinitions:
        - Name: simple-bank-api
          Cpu: 256
          Memory: 512
          Image: vitormsp/simple-bank
          PortMappings:
            - ContainerPort: !FindInMap ["ContainersMap", "Api", "Port"]
          Environment:
            - Name: Kestrel__Endpoints__Http__Url
              Value: !Sub
                - "http://0.0.0.0:${ApiPort}"
                - ApiPort: !FindInMap ["ContainersMap", "Api", "Port"]
            - Name: Token__AccessTokenExpiresInSeconds
              Value: !Ref "AccessTokenExpiresInSeconds"
            - Name: Token__RefreshTokenExpiresInSeconds
              Value: !Ref "RefreshTokenExpiresInSeconds"
          Secrets:
            - Name: ConnectionStrings__PostgresConnection
              ValueFrom: !Sub "${SecretsManagerSecret}:DB_CONNECTION_STRING::"
            - Name: Redis__ConnectionString
              ValueFrom: !Sub "${SecretsManagerSecret}:CACHE_CONNECTION_STRING::"
            - Name: Token__Key
              ValueFrom: !Sub "${SecretsManagerSecret}:TOKEN_KEY::"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref ApplicationName
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-api-td"
  ECSServiceApi:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Sub "${ApplicationName}-api-service"
      Cluster: !Ref "ECSCluster"
      LaunchType: FARGATE
      TaskDefinition: !Ref "TaskDefinitionApi"
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref "TaskSecurityGroupApi"
          Subnets:
            - !Ref "PrivateSubnet01"
            - !Ref "PrivateSubnet02"
      LoadBalancers:
        - ContainerName: "simple-bank-api"
          ContainerPort: !FindInMap ["ContainersMap", "Api", "Port"]
          TargetGroupArn: !Ref "TargetGroup"
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub "${ApplicationName}-ns"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-api-service"
  ECSAutoScalingRoleApi:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSAutoScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:PutScalingPolicy
                Resource: "*"
  ECSServiceScalableTargetApi:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSServiceApi
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub "service/${ECSCluster}/${ApplicationName}-api-service"
      RoleARN: !GetAtt ECSAutoScalingRoleApi.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ECSServiceScalingPolicyApi:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ApplicationName}-api-cpu-scaling-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceScalableTargetApi
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
  # Cache ECS Service
  TaskSecurityGroupCache:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the redis cache
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        - CidrIp: !FindInMap ["VPCMap", "VPC", "CIDR"]
          IpProtocol: tcp
          FromPort: !FindInMap ["ContainersMap", "Cache", "Port"]
          ToPort: !FindInMap ["ContainersMap", "Cache", "Port"]
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-cache-task-sg"
  TaskExecutionRoleCache:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TaskExecutionRoleCache
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TaskExecutionRolePolicyCache
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                Resource: "*"
  TaskDefinitionCache:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ApplicationName}-cache-td"
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref "TaskExecutionRoleCache"
      ContainerDefinitions:
        - Name: simple-bank-cache
          Cpu: 256
          Memory: 512
          Image: redis:7.4.1-alpine
          PortMappings:
            - ContainerPort: !FindInMap ["ContainersMap", "Cache", "Port"]
              Name: !Sub "${ApplicationName}-cache"
          Secrets:
            - Name: REDIS_PASSWORD
              ValueFrom: !Sub "${SecretsManagerSecret}:CACHE_PASSWORD::"
          Command:
            - sh
            - -c
            - "redis-server --requirepass $REDIS_PASSWORD"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref ApplicationName
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-cache-td"
  ECSServiceCache:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${ApplicationName}-cache-service"
      Cluster: !Ref "ECSCluster"
      LaunchType: FARGATE
      TaskDefinition: !Ref "TaskDefinitionCache"
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 30
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref "TaskSecurityGroupCache"
          Subnets:
            - !Ref "PublicSubnet01"
            - !Ref "PublicSubnet02"
          AssignPublicIp: ENABLED
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub "${ApplicationName}-ns"
        Services:
          - PortName: !Sub "${ApplicationName}-cache"
            DiscoveryName: !Sub "${ApplicationName}-cache"
            ClientAliases:
              - DnsName: redis
                Port: !FindInMap ["ContainersMap", "Cache", "Port"]
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-cache-service"

  # Pipeline
  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "vitormsp/simple-bank"
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:PutImage
                Resource: "*"
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ApplicationName}-build"
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:5.0"
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                  - ecs:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - codestar-connections:*
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - iam:PassRole
                Resource: "*"
  ArtifactsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "vitormsp-artifacts"
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${ApplicationName}-pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref "GitHubConnectionArn"
                FullRepositoryId: "vitor-msp/simple-bank-api"
                BranchName: "main"
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref "CodeBuild"
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ECSDeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref "ECSCluster"
                ServiceName: !Ref "ECSServiceApi"
                FileName: "imagedefinitions.json"
              RunOrder: 1

  # S3
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "vitormsp-simple-bank"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      VersioningConfiguration:
        Status: Enabled
  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::vitormsp-simple-bank/*"

Outputs:
  ApiUrl:
    Description: API public URL
    Value: !Sub http://${PublicLoadBalancer.DNSName}
  WebsiteURL:
    Description: Website public URL
    Value: !GetAtt S3Bucket.WebsiteURL
